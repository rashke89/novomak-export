{"ast":null,"code":"import { PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_FAIL, PRODUCT_SAVE_REQUEST, PRODUCT_SAVE_SUCCESS, PRODUCT_SAVE_FAIL, PRODUCT_DELETE_SUCCESS, PRODUCT_DELETE_FAIL, PRODUCT_DELETE_REQUEST, PRODUCT_REVIEW_SAVE_REQUEST, PRODUCT_REVIEW_SAVE_FAIL, PRODUCT_REVIEW_SAVE_SUCCESS } from '../constants/productConstants';\nimport axios from 'axios';\nimport Axios from 'axios';\n\nconst listProducts = (category = '', searchKeyword = '', sortOrder = '', page = 1) => async dispatch => {\n  try {\n    // debugger\n    dispatch({\n      type: PRODUCT_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/products?category=${category}&searchKeyword=${searchKeyword}&sortOrder=${sortOrder}&page=${page}`, {\n      headers: {\n        page\n      }\n    });\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst saveProduct = product => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_SAVE_REQUEST,\n      payload: product\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n\n    if (!product._id) {\n      const {\n        data\n      } = await Axios.post('/api/products', product, {\n        headers: {\n          Authorization: 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({\n        type: PRODUCT_SAVE_SUCCESS,\n        payload: data\n      });\n    } else {\n      const {\n        data\n      } = await Axios.put('/api/products/' + product._id, product, {\n        headers: {\n          Authorization: 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({\n        type: PRODUCT_SAVE_SUCCESS,\n        payload: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst detailsProduct = productId => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_DETAILS_REQUEST,\n      payload: productId\n    });\n    const {\n      data\n    } = await axios.get('/api/products/' + productId);\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst deleteProdcut = productId => async (dispatch, getState) => {\n  try {\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    dispatch({\n      type: PRODUCT_DELETE_REQUEST,\n      payload: productId\n    });\n    const {\n      data\n    } = await axios.delete('/api/products/' + productId, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: PRODUCT_DELETE_SUCCESS,\n      payload: data,\n      success: true\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DELETE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst saveProductReview = (productId, review) => async (dispatch, getState) => {\n  try {\n    const {\n      userSignin: {\n        userInfo: {\n          token\n        }\n      }\n    } = getState();\n    dispatch({\n      type: PRODUCT_REVIEW_SAVE_REQUEST,\n      payload: review\n    });\n    const {\n      data\n    } = await axios.post(`/api/products/${productId}/reviews`, review, {\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    });\n    dispatch({\n      type: PRODUCT_REVIEW_SAVE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    // report error\n    dispatch({\n      type: PRODUCT_REVIEW_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { listProducts, detailsProduct, saveProduct, deleteProdcut, saveProductReview };","map":{"version":3,"sources":["/Users/radosmijatovic/projects/novomak-export/frontend/src/actions/productActions.js"],"names":["PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_DETAILS_FAIL","PRODUCT_SAVE_REQUEST","PRODUCT_SAVE_SUCCESS","PRODUCT_SAVE_FAIL","PRODUCT_DELETE_SUCCESS","PRODUCT_DELETE_FAIL","PRODUCT_DELETE_REQUEST","PRODUCT_REVIEW_SAVE_REQUEST","PRODUCT_REVIEW_SAVE_FAIL","PRODUCT_REVIEW_SAVE_SUCCESS","axios","Axios","listProducts","category","searchKeyword","sortOrder","page","dispatch","type","data","get","headers","payload","error","message","saveProduct","product","getState","userSignin","userInfo","_id","post","Authorization","token","put","detailsProduct","productId","deleteProdcut","delete","success","saveProductReview","review"],"mappings":"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","sourcesContent":["import {\n  PRODUCT_LIST_REQUEST,\n  PRODUCT_LIST_SUCCESS,\n  PRODUCT_LIST_FAIL,\n  PRODUCT_DETAILS_REQUEST,\n  PRODUCT_DETAILS_SUCCESS,\n  PRODUCT_DETAILS_FAIL,\n  PRODUCT_SAVE_REQUEST,\n  PRODUCT_SAVE_SUCCESS,\n  PRODUCT_SAVE_FAIL,\n  PRODUCT_DELETE_SUCCESS,\n  PRODUCT_DELETE_FAIL,\n  PRODUCT_DELETE_REQUEST,\n  PRODUCT_REVIEW_SAVE_REQUEST,\n  PRODUCT_REVIEW_SAVE_FAIL,\n  PRODUCT_REVIEW_SAVE_SUCCESS,\n} from '../constants/productConstants';\nimport axios from 'axios';\nimport Axios from 'axios';\n\nconst listProducts = (\n  category = '',\n  searchKeyword = '',\n  sortOrder = '',\n  page = 1\n) => async (dispatch) => {\n  try {\n    // debugger\n    dispatch({ type: PRODUCT_LIST_REQUEST });\n    const { data } = await axios.get(\n      `/api/products?category=${category}&searchKeyword=${searchKeyword}&sortOrder=${sortOrder}&page=${page}`, {\n        headers: {\n          page\n        }\n        }\n    );\n    dispatch({ type: PRODUCT_LIST_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: PRODUCT_LIST_FAIL, payload: error.message });\n  }\n};\n\nconst saveProduct = (product) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: PRODUCT_SAVE_REQUEST, payload: product });\n    const {\n      userSignin: { userInfo },\n    } = getState();\n    if (!product._id) {\n      const { data } = await Axios.post('/api/products', product, {\n        headers: {\n          Authorization: 'Bearer ' + userInfo.token,\n        },\n      });\n      dispatch({ type: PRODUCT_SAVE_SUCCESS, payload: data });\n    } else {\n      const { data } = await Axios.put(\n        '/api/products/' + product._id,\n        product,\n        {\n          headers: {\n            Authorization: 'Bearer ' + userInfo.token,\n          },\n        }\n      );\n      dispatch({ type: PRODUCT_SAVE_SUCCESS, payload: data });\n    }\n  } catch (error) {\n    dispatch({ type: PRODUCT_SAVE_FAIL, payload: error.message });\n  }\n};\n\nconst detailsProduct = (productId) => async (dispatch) => {\n  try {\n    dispatch({ type: PRODUCT_DETAILS_REQUEST, payload: productId });\n    const { data } = await axios.get('/api/products/' + productId);\n    dispatch({ type: PRODUCT_DETAILS_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: PRODUCT_DETAILS_FAIL, payload: error.message });\n  }\n};\n\nconst deleteProdcut = (productId) => async (dispatch, getState) => {\n  try {\n    const {\n      userSignin: { userInfo },\n    } = getState();\n    dispatch({ type: PRODUCT_DELETE_REQUEST, payload: productId });\n    const { data } = await axios.delete('/api/products/' + productId, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token,\n      },\n    });\n    dispatch({ type: PRODUCT_DELETE_SUCCESS, payload: data, success: true });\n  } catch (error) {\n    dispatch({ type: PRODUCT_DELETE_FAIL, payload: error.message });\n  }\n};\n\nconst saveProductReview = (productId, review) => async (dispatch, getState) => {\n  try {\n    const {\n      userSignin: {\n        userInfo: { token },\n      },\n    } = getState();\n    dispatch({ type: PRODUCT_REVIEW_SAVE_REQUEST, payload: review });\n    const { data } = await axios.post(\n      `/api/products/${productId}/reviews`,\n      review,\n      {\n        headers: {\n          Authorization: 'Bearer ' + token,\n        },\n      }\n    );\n    dispatch({ type: PRODUCT_REVIEW_SAVE_SUCCESS, payload: data });\n  } catch (error) {\n    // report error\n    dispatch({ type: PRODUCT_REVIEW_SAVE_FAIL, payload: error.message });\n  }\n};\n\nexport {\n  listProducts,\n  detailsProduct,\n  saveProduct,\n  deleteProdcut,\n  saveProductReview\n\n};\n"]},"metadata":{},"sourceType":"module"}